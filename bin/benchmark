#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'pp'
require 'fileutils'

tools_root = File.expand_path(File.join(File.dirname(__FILE__), '..'))
logs_root = File.expand_path(File.join(ENV['HOME'], 'fio_logs'))

require File.join(tools_root, 'lib', 'disk')
require File.join(tools_root, 'lib', 'fio_job')

options = OpenStruct.new

opts = OptionParser.new do |opts|
  opts.banner = "Usage: benchmark [options]"

  opts.separator "" 
  opts.separator "Disks available:"

  Disk.all.each do |d|
    next if d.name == "sda" # Skip boot disk

    opts.separator " - #{d.inspect}"
  end

  opts.separator "" 
  opts.separator "Jobs:"

  FioJob.all.each do |j|
    opts.separator " - #{j.inspect}"
  end

  opts.separator ""
  opts.separator "Specific options:"

  opts.on("-d", "--disk DISK", "Disk to test") do |d|
    options.disk = Disk.new(d)
  end

  opts.on("-j", "--job JOB", "FIO job to run") do |j|
    options.job = j
  end

  # opts.on("-l", "--length [LENGTH]", [:short, :long], 
  #         "Specify test length (short, long)") do |l|
  #   options.length = l
  # end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end

opts.parse!(ARGV)

if options.disk.nil? || options.job.nil?
  puts opts
  exit
end

options.log_directory = File.join(logs_root, 
                                  options.disk.model.gsub(/\s+/, '_'),
                                  Time.now.strftime("%Y_%m_%d_%H_%M"))

puts "Disk: #{options.disk.inspect}"
puts "Job: #{options.job.inspect}"
puts "Logs: #{options.log_directory}"

__END__

FileUtils.mkdir_p(options.log_directory)
Dir.chdir(options.log_directory)

